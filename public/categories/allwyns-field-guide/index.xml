<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Allwyns Field Guide on XtoPY</title>
    <link>http://localhost:1313/categories/allwyns-field-guide/</link>
    <description>Recent content in Allwyns Field Guide on XtoPY</description>
    <generator>Hugo -- 0.127.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Jan 2022 16:01:16 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/allwyns-field-guide/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dealing with columns in pandas</title>
      <link>http://localhost:1313/posts/dealing-with-columns-in-pandas/</link>
      <pubDate>Sat, 15 Jan 2022 16:01:16 +0530</pubDate>
      <guid>http://localhost:1313/posts/dealing-with-columns-in-pandas/</guid>
      <description>In this post I go into some uncommon techniques I use every so often to select columns and rows from dataframes in pandas</description>
      <content:encoded><![CDATA[<h2 id="why-even-bother">Why even bother?</h2>
<p>When working with DataFrames in pandas, I have always missed the ease with which I could select rows and columns in Excel. Simple things like deleting a particular cell or arranging columns were soo incredibly easy and intuitive. Of course Google sheets take this one step further with its fancy editor. I am yet to find such ease of use within pandas.</p>
<p>In today&rsquo;s post I would like to share a couple of handy techniques I use every soo often to deal with the seemingly simple task of selecting and moving around rows and columns in Pandas.</p>
<h2 id="the-basics">The Basics</h2>
<h3 id="setting-up-our-base-data">Setting up our base data</h3>
<p>Here&rsquo;s the base code on top of which I will show all examples:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">re</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s1">&#39;https://people.sc.fsu.edu/~jburkardt/data/csv/zillow.csv&#39;</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="vanilla-ways-of--selecting-columns">Vanilla ways of  selecting columns</h2>
<h3 id="using-angle-brackets">Using angle brackets</h3>
<p>Doing so will create a new df with the columns Index, Beds and Baths</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[[</span><span class="s1">&#39;Index&#39;</span><span class="p">,</span> <span class="s1">&#39;Beds&#39;</span><span class="p">,</span> <span class="s1">&#39;Baths&#39;</span><span class="p">]]</span>
</span></span></code></pre></div><h3 id="using-get">Using .get</h3>
<p>If any column mentioned in the list does not exist, it will return a NONE.
This technique is useful for two reasons:</p>
<ol>
<li>When you need to explicitly and in a human readable way mention which columns you need</li>
<li>When the each of the columns mentioned are absolutely necessary.</li>
</ol>
<p>If any one column could not be found in the source df, you get no df in the output. Instead you get a nice little &lsquo;None&rsquo;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df</span><span class="o">.</span><span class="n">get</span><span class="p">([</span><span class="s1">&#39;Index&#39;</span><span class="p">,</span> <span class="s1">&#39;Beds&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df</span><span class="o">.</span><span class="n">get</span><span class="p">([</span><span class="s1">&#39;Index&#39;</span><span class="p">,</span> <span class="s1">&#39;Beds&#39;</span><span class="p">,</span> <span class="s1">&#39;Swimming Pools&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="c1">#$ None</span>
</span></span></code></pre></div><h3 id="filter-from-existing-columns">Filter from existing columns</h3>
<p>While &lsquo;.get&rsquo; returns a &lsquo;None&rsquo; on a nonexistent column, we can still return whatever other columns were found in the source df, sans the one that wasn&rsquo;t</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="o">.</span><span class="n">isin</span><span class="p">([</span><span class="s1">&#39;Index&#39;</span><span class="p">,</span> <span class="s1">&#39;Beds&#39;</span><span class="p">,</span> <span class="s1">&#39;Swimming Pools&#39;</span><span class="p">])]]</span>
</span></span></code></pre></div><h3 id="filter-out-unwanted-columns">Filter out unwanted columns</h3>
<p>Select everything <strong>EXCEPT</strong> a particular column or a subset of columns.
The following code gives us all columns except &ldquo;Beds&rdquo; and &ldquo;Sqft&rdquo;</p>
<h4 id="using-difference">Using Difference</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="o">.</span><span class="n">difference</span><span class="p">([</span><span class="s1">&#39;Beds&#39;</span><span class="p">,</span> <span class="s1">&#39;Sqft&#39;</span><span class="p">])]</span>
</span></span></code></pre></div><h4 id="using-isin">Using .isin()</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">[</span><span class="o">~</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="o">.</span><span class="n">isin</span><span class="p">([</span><span class="s1">&#39;Beds&#39;</span><span class="p">,</span><span class="s1">&#39;Sqft&#39;</span><span class="p">])]]</span>
</span></span></code></pre></div><h2 id="pro-coder-ways-of--selecting-columns">Pro coder ways of  selecting columns</h2>
<h3 id="selecting-based-on-data-type">Selecting based on data type</h3>
<p>I recently had the good fortune of working with a huge dataset with a decade worth of transactions. One of the things I had to do was select all columns with some pricing information. This technique is a good candidate to show how we could use some better mindful ways to select data en mass.
Before you use this technique, I would also suggest getting to know what the data types of each column with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df</span><span class="o">.</span><span class="n">dtypes</span>
</span></span></code></pre></div><p>then using another command to automatically converting types or doing it manually</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">convert_dtypes</span><span class="p">()</span>
</span></span></code></pre></div><p>Select all columns of type number (64 bit integers to be specific)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df</span><span class="o">.</span><span class="n">loc</span><span class="p">[:,(</span><span class="n">df</span><span class="o">.</span><span class="n">dtypes</span><span class="o">==</span><span class="s1">&#39;int64&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">values</span><span class="p">]</span>
</span></span></code></pre></div><p>Note: the required data was a 3 digit integer hence I choose &lsquo;int'64, else we would use more expansive types like float.</p>
<h3 id="select-a-column-based-on-column-names">Select a column based on column names</h3>
<h4 id="if-column-name-contains-a-character-or-word">If column name contains a character or word</h4>
<p>Here the code says: Give me all rows of <code>df</code> for which each column has the word <code>'price'</code> in it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df</span><span class="o">.</span><span class="n">loc</span><span class="p">[:,[</span><span class="s1">&#39;price&#39;</span> <span class="ow">in</span> <span class="n">i</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">]]</span>
</span></span></code></pre></div><h4 id="if-column-name-starts-with-a-particular-character-or-word-prefix">If column name starts with a particular character or word (prefix)</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df</span><span class="o">.</span><span class="n">loc</span><span class="p">[:,[</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;S&#39;</span><span class="p">)]]</span>
</span></span></code></pre></div><h4 id="if-column-name-ends-with-a-particular-character-or-word-suffix">If column name ends with a particular character or word (suffix)</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df</span><span class="o">.</span><span class="n">loc</span><span class="p">[:,[</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s1">&#39;s&#39;</span><span class="p">)]]</span>
</span></span></code></pre></div><h2 id="exotic-ways-of--selecting-columns">Exotic ways of  selecting columns</h2>
<p>Now this may not be your everyday use case but I still mention it here for reference. I use it every once in a while and always forget how it works. When it works, it works and you wonder why you didn&rsquo;t know this existed.</p>
<h4 id="select-the-columns-if-the-rows-meet-a-certain-condition">Select the columns if the rows meet a certain condition</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df</span><span class="o">.</span><span class="n">loc</span><span class="p">[:,[(</span><span class="n">df</span><span class="p">[</span><span class="n">col</span><span class="p">]</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">7</span><span class="p">)</span> <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="p">]]</span>
</span></span></code></pre></div><p>In this we use this thing called <code>list comprehension</code> where we generate a list of columns that meet a certain condition.</p>
<h2 id="wrapping-up">Wrapping up</h2>
<p>I hope these techniques were insightful and more than that, you use them in some project soon.
I am always on the look out to improve my game, if you think you have something to add&ndash; either a whole new technique or changes to an existing bit of code, please hit me up on Github or Twitter at <a href="https://twitter.com/thisallwyn">@thisAllwyn</a> .
You can also join my telegram Channel to interact with other Pythonistas and extend the conversation there 😄</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
